//= EtcaInstPrinter.h - Convert Etca MCInst to asm syntax -------*- C++ -*--//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This class prints a Etca MCInst to a .s file.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_ETCA_MCTARGETDESC_ETCAINSTPRINTER_H
#define LLVM_LIB_TARGET_ETCA_MCTARGETDESC_ETCAINSTPRINTER_H

#include "llvm/MC/MCInstPrinter.h"

namespace llvm {
class StringRef;

class EtcaInstPrinter : public MCInstPrinter {
public:
  EtcaInstPrinter(const MCAsmInfo &MAI, const MCInstrInfo &MII,
                   const MCRegisterInfo &MRI)
      : MCInstPrinter(MAI, MII, MRI) {}

  void printInst(const MCInst *MI, uint64_t Address, StringRef Annot,
                 const MCSubtargetInfo &STI, raw_ostream &O) override;

  // Autogenerated by tblgen.
  std::pair<const char *, uint64_t> getMnemonic(const MCInst *MI) override;
  void printInstruction(const MCInst *MI, uint64_t Address, raw_ostream &O);
  bool printAliasInstr(const MCInst *MI, uint64_t Address, raw_ostream &OS);
  void printCustomAliasOperand(const MCInst *MI, uint64_t Address,
                               unsigned OpIdx, unsigned PrintMethodIdx,
                               raw_ostream &O);
  static const char *getRegisterName(MCRegister Reg);
  void printRegName(raw_ostream &OS, MCRegister Reg) const override;
  void printOperand(const MCInst *MI, uint64_t ID, raw_ostream &O);
  void printImm5_AsmOperand(const MCInst *MI, uint64_t ID, raw_ostream &O);
};

} // end namespace llvm

#endif // LLVM_LIB_TARGET_ETCA_MCTARGETDESC_ETCAINSTPRINTER_H
